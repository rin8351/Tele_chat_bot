# -*- coding: utf-8 -*-

from aiogram import Bot, types
import re
import datetime
import json
import os
from  request_to_chatgpt import send_request_to_chatgpt
import queue
import asyncio
import pytz
import logging
import time


from telethon import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest
from telethon.errors import SessionPasswordNeededError

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage 

prompt = ''
schedule_times = ['00:00','09:00', '12:00', '17:00', '21:00' ,'23:59']
bot_is_running = False
chat_id_in_bot = None
bot_busy = False
last_filter_time = schedule_times[0]
style = "AiDoge-–º–∏–ª–ª–∏–æ–Ω–µ—Ä—ã –∫–ª–µ–π–º—è—Ç —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã –∏ –Ω–µ—Å—É—Ç –∏—Ö –≤ —Å—Ç–∞–∫–∞–Ω –∫–æ—Ç–æ—Ä—ã–π –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥. –ù–æ–≤—ã–π –º–µ–º–∫–æ–∏–Ω —Ä–∞–∑–∂–∏–≥–∞–µ—Ç –∏ –±–µ–∑ —Ç–æ–≥–æ –æ–≥—Ä–æ–º–Ω—É—é –∂–∞–¥–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ. –í —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å —Ç–µ–º, —á—Ç–æ –¥–∞–ª Arbitrum - —ç—Ç–æ –∫–æ–ø–µ–π–∫–∏, –Ω–æ —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞? üòè –ü–æ–ø–æ–ª–∑–ª–∏ —Å–ª—É—Ö–∏, —á—Ç–æ –±–∏—Ä–∂–∞ Binance –æ—Ç–º–µ–Ω–∏–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ $10.000 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–§. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤—Ä–æ–¥–µ –±—ã –Ω–µ –±—ã–ª–æ, –Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –±–∏—Ä–∂–∏ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è. HotBit —Ä–µ—à–∏–ª–∏ –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–µ–≤—ã–ø—É—â–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º L0. –ö–æ–º–∞–Ω–¥–µ L0 –ø—Ä–∏—à–ª–æ—Å—å –æ—Ç–¥—É–≤–∞—Ç—å—Å—è - –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ç–æ–∫–µ–Ω. –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –ê—Ä—Ç—É—Ä–∞ –•—ç–π–µ—Å–∞ ¬´–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥¬ª. Aptos –∑–∞–ø—É—Å—Ç–∏–ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–µ–π–∫–∏–Ω–≥. –ú–æ–∂–Ω–æ –æ—Ç–¥–∞—Ç—å  —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã –≤ –æ–±–æ—Ä–æ—Ç ¬´–≤–ª–∞–¥–µ–ª—å—Ü–∞–º NYM-–∏–Ω—Å–∞–π–¥–æ–≤¬ª. –û–Ω–∏ –ø–æ—Ö–æ–ª–¥—è—Ç –∏—Ö –∑–∞ –≤–∞—Å. üòÑ–ù–∞ –û–ö–• –ø–æ—è–≤–∏–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ —Ç–æ–º, –∫–∞–∫ –∑–∞—Ö–∞–Ω—Ç–∏—Ç—å –¥—Ä–æ–ø –æ—Ç L0."

path = 'data'
file = 'data.json'
file_path = os.path.join(path, file)
with open(file_path, 'r', encoding='utf-8') as f:
    data = json.load(f)

path2 = 'data'
file2 = 'result.json'
file_path2 = os.path.join(path2, file2)

api_id = data['api_id']
api_hash = data['api_hash']
phone_number =  data['phone_number']
username= data['username']
password = data['password']

YOUR_PRIVATE_CHANNEL = data['YOUR_PRIVATE_CHANNEL']
chat_origin_mess = data['chat_origin_mess']
YOUR_ADMIN_CHAT_ID = data['YOUR_ADMIN_CHAT_ID']
CHANNEL_to_send = data['CHANNEL_to_send']
TELEGRAM_BOT_TOKEN = data['TELEGRAM_BOT_TOKEN']

storage = MemoryStorage()

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot,storage=storage)

class SetPromptStates(StatesGroup):
    waiting_for_prompt = State()

class SetScheduleStates(StatesGroup):
    waiting_for_schedule = State()

class SetStyleStates(StatesGroup):
    waiting_for_style = State()


async def export_message_history(client,group,file_path2):
    # Define the date range for which you want to export messages
    utc = pytz.UTC
    start_date = datetime.datetime.now(utc) - datetime.timedelta(days=1)
    end_date = datetime.datetime.now(utc)
    messages = []

    async for dialog in client.iter_dialogs():
        if dialog.name == group:
            group = dialog.entity
            break

    if group is None:
        logger.info(f"Group '{group}' not found.")
        return "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    if hasattr(group, 'megagroup') and group.megagroup:
        group_full = await client(GetFullChannelRequest(group))
    else:
        group_full = await client(GetFullChatRequest(group.id))
    async for message in client.iter_messages(group):
        if message.date > start_date and message.date < end_date:
            messages.append({
                'id': message.id,
                'text': message.text,
                'date': message.date.isoformat(),
                'reply_to_msg_id': message.reply_to_msg_id,
            })

    if not messages:
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π.'
    with open(file_path2, 'w', encoding='utf-8') as file:
        json.dump(messages, file, ensure_ascii=False, indent=4)

    return messages

def is_file_empty(file_path):
    return os.stat(file_path).st_size == 0

async def conn_to_tele_and_exp(client):
    data_to_gpt = None
    while data_to_gpt is None:
        data_to_gpt = await export_message_history(client, YOUR_PRIVATE_CHANNEL, file_path2)
        time.sleep(60)
        
    with open(file_path2, 'r', encoding='utf-8') as f:
        data_to_gpt = json.load(f)
    return data_to_gpt

async def create_telegram_client():
    client = TelegramClient(username, api_id, api_hash)
    logger.info('Connecting...')

    await client.connect()
    if not await client.is_user_authorized():
        await bot.send_message(chat_id_in_bot, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–∞–º –≤—ã—Å–ª–∞–Ω–æ —Å–º—Å —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        result = await client.send_code_request(phone_number)
        phone_code_hash = result.phone_code_hash
        logger.info('Sent to phone number - %s', phone_number)
        sms_path = 'data'
        sms_filename = 'sms_code.txt'
        sms_filepath = os.path.join(sms_path, sms_filename)
        while not os.path.exists(sms_filepath) or is_file_empty(sms_filepath):
            time.sleep(1)
        with open(sms_filepath, 'r') as f:
            code = f.read().strip()
        logger.info('Signing in...')
        try:
            await client.sign_in(phone=phone_number, code=code, phone_code_hash=phone_code_hash)
        except SessionPasswordNeededError:
            try:
                await client.sign_in(password=password)
            except Exception as e:
                logger.error('Error: {}'.format(e))
                return
        except Exception as e:
            logger.error('Error: {}'.format(e))
            return
        logger.info('phone number - %s', phone_number)
        logger.info('code - %s', code)
    await bot.send_message(chat_id_in_bot, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    if not await client.is_user_authorized():
        return False, None

    return True, client

async def long_running_function(result_queue, last_filter_time, now,client):
    data_to_gpt = await conn_to_tele_and_exp(client)
    if data_to_gpt == "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." or data_to_gpt == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π.": 
        final_result= data_to_gpt
        result_queue.put(data_to_gpt)
        await bot.send_message(chat_id_in_bot, data_to_gpt)
        return
    else:
        filtered_messages=filter_messages_by_time(data_to_gpt, last_filter_time, now)  # function for filtering messages by time
        chatgpt_result_queue = queue.Queue()
        chatgpt_task,result_of_none = asyncio.create_task(send_request_to_chatgpt(chatgpt_result_queue, prompt, filtered_messages,style))
        await chatgpt_task
        final_result = chatgpt_result_queue.get()
        summary_with_links = replace_id_exter_links(final_result)
        result_queue.put((summary_with_links,result_of_none))

def replace_id_exter_links(text_with_names):
    skip_first_line = [True]  # Using a list to make it mutable

    def replace_id_with_link(match):
        if skip_first_line[0]:
            skip_first_line[0] = False
            return match.group(0)

        message_id = match.group(1)
        rest_of_line = match.group(2)
        words = rest_of_line.split()
        replaced = False
        for i, word in enumerate(words):
            if len(word) > 3:
                words[i] = f'[{word}](https://t.me/c/chat_origin_mess/{message_id})'
                replaced = True
                break
        if not replaced:
            words.insert(0, f'[{words[0]}](https://t.me/c/chat_origin_mess/{message_id})')
        return ' '.join(words)

    def replace_external_links(match):
        external_link = match.group(1)
        rest_of_line = match.group(2)
        return f'{rest_of_line} [–ó–¥–µ—Å—å —Å—Å—ã–ª–∫–∞]({external_link})'

    summary_with_external_links = re.sub(r'(https?://\S+)(.*)', replace_external_links, text_with_names)
    summary_with_links = re.sub(r'(\d+):(.*)', replace_id_with_link, summary_with_external_links)

    return summary_with_links

def filter_messages_by_time(messages, start_time, end_time):
    start_time_obj = datetime.datetime.strptime(start_time, '%H:%M').time()
    end_time_obj = datetime.datetime.strptime(end_time, '%H:%M').time()

    filtered_messages = []

    for message in messages:
        msg_time = datetime.datetime.fromisoformat(message['date']).time()
        if start_time_obj <= msg_time < end_time_obj:
            text = message.get('text', '')

            filtered_message = {
                'id': message['id'],
                'date': message['date'],
                'reply_to_msg_id': message.get('reply_to_msg_id', None),
                'text': text,
            }
            filtered_messages.append(filtered_message)
    return filtered_messages

async def send_prompt(telegram_client):
    global last_filter_time, bot_busy
    while bot_is_running:
        now = datetime.datetime.now().strftime('%H:%M')
        if now in schedule_times: 
            if chat_id_in_bot is not None and not bot_busy:
                bot_busy = True
                await bot.send_message(chat_id_in_bot, "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –±–æ—Ç –∑–∞–Ω—è—Ç")
                result_queue = queue.Queue()
                task = asyncio.create_task(long_running_function(result_queue, last_filter_time, now, telegram_client))
                await task
                summary_with_links,result_of_none = result_queue.get()
                if result_of_none !='':
                    await bot.send_message(chat_id_in_bot, result_of_none)
                await bot.send_message(CHANNEL_to_send, summary_with_links,parse_mode='Markdown')
                await bot.send_message(chat_id_in_bot, "–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –±–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω")
                bot_busy = False
                last_filter_time = now 
                await asyncio.sleep(60)
            await asyncio.sleep(10)

async def start_bot(message):
    global bot_is_running, chat_id_in_bot, bot_busy
    chat_id_in_bot = message.chat.id
    is_authorized, telegram_client = await create_telegram_client()
    if is_authorized:
        if not prompt:
            await bot.send_message(message.chat.id, "–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /set_prompt.")
            return
        if not bot_is_running:
            bot_is_running = True
            await bot.send_message(chat_id_in_bot, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            await send_prompt(telegram_client) 
    else:
        await bot.send_message(chat_id_in_bot, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global chat_id_in_bot,bot_busy
    if not bot_busy:
        chat_id_in_bot = message.chat.id
        await bot.send_message(chat_id=message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start_bot")
    else:
        await bot.send_message(chat_id=message.chat.id, text= "–ë–æ—Ç –∑–∞–Ω—è—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

@dp.message_handler(commands=['start_bot'])
async def handle_start_bot(message: types.Message):
    await start_bot(message)
    if bot_is_running:
        if not bot_busy:
            await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        else:
            await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –∑–∞–Ω—è—Ç")


@dp.message_handler(commands=['stop_bot'])
async def handle_stop_bot(message: types.Message):
    global bot_is_running
    bot_is_running = False
    await bot.send_message(message.chat.id, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")

@dp.message_handler(Command("update_schedule"), state=None)
async def handle_update_schedule(message: types.Message, state: FSMContext):
    if not bot_busy:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª, –≤ 24 —á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)\n–ü—Ä–∏–º–µ—Ä: 09:00, 12:00, 17:00, 21:00")
        await SetScheduleStates.waiting_for_schedule.set()
    else:
        await bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–Ω—è—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

@dp.message_handler(lambda message: not message.text.startswith("/"), state=SetScheduleStates.waiting_for_schedule)
async def process_update_schedule(message: types.Message, state: FSMContext):
    global schedule_times
    times = message.text.split(', ')
    pattern = re.compile(r'^\d{2}:\d{2}$')

    if all(pattern.match(time) for time in times):
        if '' in times:
            await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ /update_schedule –∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n 09:00, 12:00, 17:00, 21:00")
        else:
            schedule_times = times
            await bot.send_message(message.chat.id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {', '.join(times)}")
    else:
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ /update_schedule –∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n 09:00, 12:00, 17:00, 21:00")
    await state.finish()


@dp.message_handler(Command("set_prompt"), state=None)
async def handle_set_prompt(message: types.Message, state: FSMContext):
    if not bot_busy:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:")
        await SetPromptStates.waiting_for_prompt.set()
    else:
        await bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–Ω—è—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

@dp.message_handler(lambda message: not message.text.startswith("/"), state=SetPromptStates.waiting_for_prompt)
async def process_set_prompt(message: types.Message, state: FSMContext):
    global prompt
    prompt = message.text
    await bot.send_message(message.chat.id, "–ü—Ä–æ–º–ø—Ç –∏–∑–º–µ–Ω–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /start_bot.")
    await state.finish()

async def set_prompt(message):
    global prompt, bot_busy,bot_is_running, chat_id_in_bot
    prompt = message.text
    await bot.send_message(message.chat.id, "–ü—Ä–æ–º—Ç –∏–∑–º–µ–Ω–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ—Ç –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /start_bot.")

async def update_schedule(message):
    global schedule_times,bot_busy
    times = message.text.split(', ')
    pattern = re.compile(r'^\d{2}:\d{2}$')

    if all(pattern.match(time) for time in times):
        # –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        if '' in times:
            await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ /update_schedule –∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n 09:00, 12:00, 17:00, 21:00")
        else:
            schedule_times = times
            await bot.send_message(message.chat.id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {', '.join(times)}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /start_bot.")
    else:
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ /update_schedule –∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n 09:00, 12:00, 17:00, 21:00")

@dp.message_handler(Command("set_style"), state=None)
async def handle_set_style(message: types.Message, state: FSMContext):
    if not bot_busy:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:")
        await SetStyleStates.waiting_for_style.set()
    else:
        await bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–Ω—è—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

@dp.message_handler(commands=['see_style'])
async def handle_see_style(message: types.Message):
    await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:\n {style}")


@dp.message_handler(lambda message: not message.text.startswith("/"), state=SetStyleStates.waiting_for_style)
async def process_set_style(message: types.Message, state: FSMContext):
    global style
    style = message.text
    await bot.send_message(message.chat.id, "–°—Ç–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω.")
    await state.finish()


@dp.message_handler(commands=['see_prompt'])
async def handle_see_prompt(message: types.Message):
    await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:\n {prompt}")

@dp.message_handler(commands=['see_schedule'])
async def handle_see_schedule(message: types.Message):
    await bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n {', '.join(schedule_times)}")

@dp.message_handler(commands=['check_bot'])
async def handle_check_bot(message: types.Message):
    await check_bot_status(message)

async def check_bot_status(message):
    global bot_is_running,bot_busy
    if bot_is_running:
        if bot_busy:
            await bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –∑–∞–Ω—è—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞")
        else:
            await bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    else:
        await bot.send_message(message.chat.id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def on_startup(dp):
    await bot.send_message(chat_id=YOUR_ADMIN_CHAT_ID, text="–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dp):
    await bot.send_message(chat_id=YOUR_ADMIN_CHAT_ID, text="–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.close()

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)